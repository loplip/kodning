name: scrape-daily

on:
  schedule:
    - cron: "0 4 * * *"   # 07:00 SE (GitHub Actions kör i UTC)
  workflow_dispatch:

permissions:
  contents: write  # krävs för att pusha med GITHUB_TOKEN

jobs:
  run-scripts:
    runs-on: ubuntu-latest

    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Om du använder Playwright i något script:
          python -m playwright install chromium
          python -m playwright install-deps || true

      - name: Run all scripts (module mode; never stop on error)
        run: |
          set +e
          declare -A rc

          echo "=== eql_find ==="
          python -u -m scripts.eql_find; rc[eql_find]=$?

          echo "=== adtraction_stats ==="
          python -u -m scripts.adtraction_stats; rc[adtraction_stats]=$?

          echo "=== adtraction_epc_finance ==="
          python -u -m scripts.adtraction_epc_finance; rc[adtraction_epc_finance]=$?

          echo "=== rugvista_aov ==="
          python -u -m scripts.rugvista_aov; rc[rugvista_aov]=$?

          echo "=== soder_stats ==="
          python -u -m scripts.soder_stats; rc[soder_stats]=$?

          echo "=== fractal_refine ==="
          python -u -m scripts.fractal_refine; rc[fractal_refine]=$?

          echo "=== fractal_scape ==="
          python -u -m scripts.fractal_scape; rc[fractal_scape]=$?

          {
            echo "## Daglig scraping – summering"
            echo ""
            echo "| Script | Status |"
            echo "|-------:|:-------|"
            for k in "${!rc[@]}"; do
              if [ "${rc[$k]}" -eq 0 ]; then st="✅ OK"; else st="❌ FAIL (${rc[$k]})"; fi
              echo "| \`$k\` | $st |"
            done
          } >> "$GITHUB_STEP_SUMMARY"

          # Avsluta alltid med success så att efterföljande steg körs
          exit 0

      # Backa upp ENDAST ändrade/nya xlsx i data/
      - name: Backup updated XLSX files to history
        if: always()
        run: |
          mkdir -p history
          TODAY=$(date +%Y-%m-%d)
          MODIFIED=$(git diff --name-only HEAD -- data/*.xlsx || true)
          NEW=$(git ls-files --others --exclude-standard -- data/*.xlsx || true)
          for f in $MODIFIED $NEW; do
            [ -f "$f" ] || continue
            base=$(basename "$f")
            dest="history/backup_${TODAY}_$base"
            cp "$f" "$dest"
            echo "Backup: $f -> $dest"
          done

      - name: Commit & push updated files (if any)
        if: always()
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Lägg till Excel i data/ samt backuper i history/
          git add data/*.xlsx || true
          git add history/backup_*.xlsx || true

          if git diff --cached --quiet; then
            echo "Inga ändringar att committa."
            exit 0
          fi

          git commit -m "chore: update data files + selective backups [skip ci]"
          git push origin HEAD:${GITHUB_REF_NAME:-main}
