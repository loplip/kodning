name: scrape-daily

on:
  schedule:
    # 05:00 UTC ≈ 06:00 (sommar) / 07:00 (vinter) i Sverige
    - cron: "0 3 * * *"
  workflow_dispatch:

permissions:
  contents: write

jobs:
  run-scripts:
    runs-on: ubuntu-latest

    steps:
      - name: Check out
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Set up Python (with pip cache)
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"
          cache-dependency-path: |
            requirements.txt

      - name: Cache Playwright browsers
        uses: actions/cache@v4
        with:
          path: ~/.cache/ms-playwright
          key: pw-${{ runner.os }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            pw-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install -r requirements.txt
          python -m playwright install chromium

      - name: Kör alla scripts
        run: |
          set +e
          declare -A rc
          declare -A outputs

          echo " "
          outputs[eql_find]="$(python -u -m scripts.eql_find 2>&1)"; rc[eql_find]=$?
          echo "${outputs[eql_find]}"

          echo " "
          outputs[adtraction_stats]="$(python -u -m scripts.adtraction_stats 2>&1)"; rc[adtraction_stats]=$?
          echo "${outputs[adtraction_stats]}"
          
          echo " "
          outputs[adtraction_epc_finance]="$(python -u -m scripts.adtraction_epc_finance 2>&1)"; rc[adtraction_epc_finance]=$?
          echo "${outputs[adtraction_epc_finance]}"
          outputs[adtraction_epc_brands]="$(python -u -m scripts.adtraction_epc_brands 2>&1)"; rc[adtraction_epc_brands]=$?
          echo "${outputs[adtraction_epc_brands]}"

          echo " "
          outputs[rugvista_aov]="$(python -u -m scripts.rugvista_aov 2>&1)"; rc[rugvista_aov]=$?
          echo "${outputs[rugvista_aov]}"
          outputs[benuta_aov]="$(python -u -m scripts.benuta_aov 2>&1)"; rc[benuta_aov]=$?
          echo "${outputs[benuta_aov]}"
          outputs[trendcarpet_aov]="$(python -u -m scripts.trendcarpet_aov 2>&1)"; rc[trendcarpet_aov]=$?
          echo "${outputs[trendcarpet_aov]}"

          echo " "
          outputs[soder_stats]="$(python -u -m scripts.soder_stats 2>&1)"; rc[soder_stats]=$?
          echo "${outputs[soder_stats]}"

          echo " "
          outputs[soder_ads]="$(python -u -m scripts.soder_ads 2>&1)"; rc[soder_ads]=$?
          echo "${outputs[soder_ads]}"

          echo " "
          outputs[sitemap_fetch]="$(python -u -m scripts.sitemap_fetch 2>&1)"; rc[sitemap_fetch]=$?
          echo "${outputs[sitemap_fetch]}"

          # ===== Var 3:e dag: adtraction_epc_all.py =====      
          echo " "
          doy=$(date +%j)                                       
          if (( doy % 3 == 0 )); then                           
            echo "Kör adtraction_epc_all (var 3:e dag)"         
            outputs[adtraction_epc_all]="$(python -u -m scripts.adtraction_epc_all 2>&1)"; rc[adtraction_epc_all]=$?   
            echo "${outputs[adtraction_epc_all]}"               
          else                                                  
            echo "Hoppar adtraction_epc_all idag (inte var 3:e dag)."  
            outputs[adtraction_epc_all]="SKIPPED"; rc[adtraction_epc_all]=0
          fi


          {
            echo "## Daglig scraping – summering"
            echo ""
            echo "| Script | Status | Output |"
            echo "|-------:|:-------|:-------|"

            scripts=(
              "eql_find"
              "adtraction_stats"
              "adtraction_epc_finance"
              "adtraction_epc_brands"
              "rugvista_aov"
              "benuta_aov"
              "trendcarpet_aov"
              "soder_stats"
              "soder_ads"
              "sitemap_fetch"
              "adtraction_epc_all"
            )

            for k in "${scripts[@]}"; do
              out="${outputs[$k]}"
              # Escapa tabelltecken/nyrader för GitHub-markdown
              out="${out//|/\\|}"
              out="${out//$'\r'/}"           # ta bort CR om sådana finns
              out="${out//$'\n'/<br/>}"
              if [[ "${rc[$k]}" -eq 0 ]]; then st="✅ OK"; else st="❌ FAIL (${rc[$k]})"; fi
              printf "| \`%s\` | %s | %s |\n" "$k" "$st" "$out"
            done
          } >> "$GITHUB_STEP_SUMMARY"

          exit 0

      - name: Upload daily backups as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backups-${{ github.run_id }}
          path: |
            data/*.xlsx
          if-no-files-found: ignore
          retention-days: 90   # <- ändra om du vill spara längre/kortare

      - name: Commit only current data files
        if: always()
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add data/*.xlsx || true
          if git diff --cached --quiet; then
            echo "Inga ändringar att committa."
            exit 0
          fi
          git commit -m "chore: update data files [skip ci]"
          git push origin HEAD:${GITHUB_REF_NAME:-main}